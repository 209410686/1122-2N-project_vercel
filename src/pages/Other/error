import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import supabase from '../../db/clientSupabase';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import './Uncards.css';

const fetchUncards = async () => {
  const { data, error } = await supabase
    .from('cards')
    .select('*');
  if (error) throw new Error(error.message);
  return data;
};

const addUncard = async (newUncard) => {
  const { data, error } = await supabase
    .from('cards')
    .insert([newUncard]);
  if (error) throw new Error(error.message);
  return data[0];
};

const updateUncard = async (uncard) => {
  const { data, error } = await supabase
    .from('cards')
    .update(uncard)
    .eq('id', uncard.id);
  if (error) throw new Error(error.message);
  return data[0];
};

const deleteUncard = async (id) => {
  const { error } = await supabase
    .from('cards')
    .delete()
    .eq('id', id);
  if (error) throw new Error(error.message);
};

const Uncards = () => {
  const queryClient = useQueryClient();
  const { data: uncards, isLoading, isError, error } = useQuery(['uncards'], fetchUncards);

  const addMutation = useMutation(addUncard, {
    onSuccess: () => {
      queryClient.invalidateQueries(['uncards']);
      toast.success('Uncard added successfully!');
    },
    onError: () => {
      toast.error('Failed to add Uncard.');
    },
  });

  const updateMutation = useMutation(updateUncard, {
    onSuccess: () => {
      queryClient.invalidateQueries(['uncards']);
      toast.success('Uncard updated successfully!');
    },
    onError: () => {
      toast.error('Failed to update Uncard.');
    },
  });

  const deleteMutation = useMutation(deleteUncard, {
    onSuccess: () => {
      queryClient.invalidateQueries(['uncards']);
      toast.success('Uncard deleted successfully!');
    },
    onError: () => {
      toast.error('Failed to delete Uncard.');
    },
  });

  const [isEditing, setIsEditing] = useState(false);
  const [editUncardId, setEditUncardId] = useState(null);
  const [newTitle, setNewTitle] = useState('');
  const [newDescription, setNewDescription] = useState('');
  const [newImgUrl, setNewImgUrl] = useState('');

  const handleAddUncard = (e) => {
    e.preventDefault();
    addMutation.mutate({
      title: newTitle,
      description: newDescription,
      img_url: newImgUrl,
    });
    setNewTitle('');
    setNewDescription('');
    setNewImgUrl('');
  };

  const handleUpdateUncard = () => {
    updateMutation.mutate({
      id: editUncardId,
      title: newTitle,
      description: newDescription,
      img_url: newImgUrl,
    });
    setIsEditing(false);
    setEditUncardId(null);
    setNewTitle('');
    setNewDescription('');
    setNewImgUrl('');
  };

  const startEditing = (uncard) => {
    setIsEditing(true);
    setEditUncardId(uncard.id);
    setNewTitle(uncard.title);
    setNewDescription(uncard.description);
    setNewImgUrl(uncard.img_url);
  };

  if (isLoading) return <div>Loading...</div>;
  if (isError) return <div>Error: {error.message}</div>;

  return (
    <div className="uncard-list">
      <ToastContainer />
      <form className="add-uncard-form" onSubmit={handleAddUncard}>
        <input
          type="text"
          placeholder="Title"
          value={newTitle}
          onChange={(e) => setNewTitle(e.target.value)}
          required
        />
        <textarea
          placeholder="Description"
          value={newDescription}
          onChange={(e) => setNewDescription(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Image URL"
          value={newImgUrl}
          onChange={(e) => setNewImgUrl(e.target.value)}
          required
        />
        <button type="submit">Add Uncard</button>
      </form>
      {uncards.map((uncard) => (
        <div className="uncard" key={uncard.id}>
          {isEditing && editUncardId === uncard.id ? (
            <div className="edit-form">
              <input
                type="text"
                value={newTitle}
                onChange={(e) => setNewTitle(e.target.value)}
              />
              <textarea
                value={newDescription}
                onChange={(e) => setNewDescription(e.target.value)}
              />
              <input
                type="text"
                value={newImgUrl}
                onChange={(e) => setNewImgUrl(e.target.value)}
              />
              <button onClick={handleUpdateUncard}>Update</button>
            </div>
          ) : (
            <>
              <img src={uncard.img_url} alt={uncard.title} className="uncard-img" />
              <div className="uncard-content">
                <h3>{uncard.title}</h3>
                <p>{uncard.description}</p>
                <button onClick={() => startEditing(uncard)}>Edit</button>
                <button onClick={() => deleteMutation.mutate(uncard.id)}>Delete</button>
              </div>
            </>
          )}
        </div>
      ))}
    </div>
  );
};


